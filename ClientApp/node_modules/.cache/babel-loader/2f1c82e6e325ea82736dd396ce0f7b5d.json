{"ast":null,"code":"var _jsxFileName = \"/Users/aardaisenkul/Desktop/ArdaHw/ArdaHw3/ArdaHw3/ClientApp/src/DemoApp.jsx\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\nimport { Container, Row, Col } from 'reactstrap';\nimport DataTable from './components/DataTable';\nimport { CSVLink } from \"react-csv\";\nimport ModalForm from './components/Modal';\nexport default class DemoApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.addEventToState = event => {\n      this.setState(prevState => ({\n        currentEvents: [...prevState.currentEvents, event]\n      }));\n    };\n\n    this.updateState = event => {\n      const eventIndex = this.state.currentEvents.findIndex(data => data.id === event.id);\n      const newArray = [// destructure all items from beginning to the indexed item\n      ...this.state.currentEvents.slice(0, eventIndex), // add the updated item to the array\n      event, // add the rest of the items to the array from the index after the replaced item\n      ...this.state.currentEvents.slice(eventIndex + 1)];\n      this.setState({\n        currentEvents: newArray\n      });\n    };\n\n    this.deleteEventFromState = id => {\n      const updatedEvents = this.state.currentEvents.filter(item => item.id !== id);\n      this.setState({\n        currentEvents: updatedEvents\n      });\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: 5,\n          customer: \"Kesgisu\",\n          project: \"TelekomTakım\",\n          type: \"Bilgisayar\",\n          hours: 5,\n          startdate: selectInfo.startStr + 'T00:00:00',\n          enddate: selectInfo.endStr + 'T00:00:00',\n          description: \"başardın\"\n        });\n      }\n      /* this.addEventToState()*/\n\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.description}'`)) {\n        clickInfo.event.remove();\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  getEvents() {\n    fetch('https://localhost:5001/api/events/').then(response => response.json()).then(currentEvents => this.setState({\n      currentEvents\n    })).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.getEvents();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"Demo-App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        margin: \"20px 0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, \"CRUD Database\"))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      items: this.state.currentEvents,\n      updateState: this.updateState,\n      deleteItemFromState: this.deleteEventFromState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: \"db.csv\",\n      color: \"primary\",\n      style: {\n        float: \"left\",\n        marginRight: \"10px\"\n      },\n      className: \"btn btn-primary\",\n      data: this.state.currentEvents,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, \"Download CSV\"), /*#__PURE__*/React.createElement(ModalForm, {\n      buttonLabel: \"Add Item\",\n      addItemToState: this.addEventToState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n  renderCalendar() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, this.renderSidebar(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: this.state.weekendsVisible,\n      initialEvents: this.state.currentEvents // alternatively, use the `events` setting to fetch from a feed\n      ,\n      select: this.handleDateSelect,\n      eventContent: renderEventContent // custom render function\n      ,\n      eventClick: this.handleEventClick,\n      eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n      /* you can update a remote database when these fire:\n      eventAdd={function(){}}\n      eventChange={function(){}}\n      eventRemove={function(){}}\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  renderSidebar() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-sidebar-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, \"Instructions\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, \"Select dates and you will be prompted to create a new event\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, \"Drag, drop, and resize events\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, \"Click an event to delete it\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-sidebar-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.weekendsVisible,\n      onChange: this.handleWeekendsToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }), \"toggle weekends\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-sidebar-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, \"All Events (\", this.state.currentEvents.length, \")\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, this.state.currentEvents.map(renderSidebarEvent))));\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, eventInfo.timeText), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, eventInfo.event.id));\n}\n\nfunction renderSidebarEvent(event) {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: event.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, formatDate(event.startdate, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, event.description));\n}","map":{"version":3,"sources":["/Users/aardaisenkul/Desktop/ArdaHw/ArdaHw3/ArdaHw3/ClientApp/src/DemoApp.jsx"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Container","Row","Col","DataTable","CSVLink","ModalForm","DemoApp","Component","state","weekendsVisible","currentEvents","addEventToState","event","setState","prevState","updateState","eventIndex","findIndex","data","id","newArray","slice","deleteEventFromState","updatedEvents","filter","item","handleWeekendsToggle","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","customer","project","type","hours","startdate","startStr","enddate","endStr","description","handleEventClick","clickInfo","window","confirm","remove","handleEvents","events","getEvents","fetch","then","response","json","catch","err","console","log","componentDidMount","render","margin","float","marginRight","renderCalendar","renderSidebar","left","center","right","renderEventContent","length","map","renderSidebarEvent","eventInfo","timeText","year","month","day"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\nimport { Container, Row, Col } from 'reactstrap'\nimport DataTable from './components/DataTable'\nimport { CSVLink } from \"react-csv\"\nimport ModalForm from './components/Modal'\n\nexport default class DemoApp extends React.Component {\n\n    state = {\n        weekendsVisible: true,\n        currentEvents: []\n    }\n\n    getEvents() {\n        fetch('https://localhost:5001/api/events/')\n            .then(response => response.json())\n            .then(currentEvents => this.setState({ currentEvents }))\n            .catch(err => console.log(err))\n    }\n\n    addEventToState = (event) => {\n        this.setState(prevState => ({\n            currentEvents: [...prevState.currentEvents, event]\n        }))\n    }\n\n    updateState = (event) => {\n        const eventIndex = this.state.currentEvents.findIndex(data => data.id === event.id)\n        const newArray = [\n            // destructure all items from beginning to the indexed item\n            ...this.state.currentEvents.slice(0, eventIndex),\n            // add the updated item to the array\n            event,\n            // add the rest of the items to the array from the index after the replaced item\n            ...this.state.currentEvents.slice(eventIndex + 1)\n        ]\n        this.setState({ currentEvents: newArray })\n    }\n\n    deleteEventFromState = (id) => {\n        const updatedEvents = this.state.currentEvents.filter(item => item.id !== id)\n        this.setState({ currentEvents: updatedEvents })\n    }\n\n    componentDidMount() {\n        this.getEvents()\n    }\n\n    render() {\n        return (\n            <div>\n            <Container className=\"Demo-App\">\n                <Row>\n                    <Col>\n                        <h1 style={{ margin: \"20px 0\" }}>CRUD Database</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <DataTable items={this.state.currentEvents} updateState={this.updateState} deleteItemFromState={this.deleteEventFromState} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <CSVLink\n                            filename={\"db.csv\"}\n                            color=\"primary\"\n                            style={{ float: \"left\", marginRight: \"10px\" }}\n                            className=\"btn btn-primary\"\n                            data={this.state.currentEvents}>\n                            Download CSV\n            </CSVLink>\n                        <ModalForm buttonLabel=\"Add Item\" addItemToState={this.addEventToState} />\n                    </Col>\n                </Row>\n            </Container>\n            </div>\n        )\n    }\n\n    renderCalendar() {\n        return (\n            <div className='demo-app'>\n                {this.renderSidebar()}\n                <div className='demo-app-main'>\n                    <FullCalendar\n                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                        headerToolbar={{\n                            left: 'prev,next today',\n                            center: 'title',\n                            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                        }}\n                        initialView='dayGridMonth'\n                        editable={true}\n                        selectable={true}\n                        selectMirror={true}\n                        dayMaxEvents={true}\n                        weekends={this.state.weekendsVisible}\n                        initialEvents={this.state.currentEvents} // alternatively, use the `events` setting to fetch from a feed\n                        select={this.handleDateSelect}\n                        eventContent={renderEventContent} // custom render function\n                        eventClick={this.handleEventClick}\n                        eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n                    /* you can update a remote database when these fire:\n                    eventAdd={function(){}}\n                    eventChange={function(){}}\n                    eventRemove={function(){}}\n                    */\n                    />\n                </div>\n            </div>\n            )\n    }\n\n    renderSidebar() {\n        return (\n            <div className='demo-app-sidebar'>\n                <div className='demo-app-sidebar-section'>\n                    <h2>Instructions</h2>\n                    <ul>\n                        <li>Select dates and you will be prompted to create a new event</li>\n                        <li>Drag, drop, and resize events</li>\n                        <li>Click an event to delete it</li>\n                    </ul>\n                </div>\n                <div className='demo-app-sidebar-section'>\n                    <label>\n                        <input\n                            type='checkbox'\n                            checked={this.state.weekendsVisible}\n                            onChange={this.handleWeekendsToggle}\n                        ></input>\n                        toggle weekends\n          </label>\n                </div>\n                <div className='demo-app-sidebar-section'>\n                    <h2>All Events ({this.state.currentEvents.length})</h2>\n                    <ul>\n                        {this.state.currentEvents.map(renderSidebarEvent)}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n    handleWeekendsToggle = () => {\n        this.setState({\n            weekendsVisible: !this.state.weekendsVisible\n        })\n    }\n\n    handleDateSelect = (selectInfo) => {\n        let title = prompt('Please enter a new title for your event')\n\n        let calendarApi = selectInfo.view.calendar\n\n        calendarApi.unselect() // clear date selection\n\n        if (title) {\n            calendarApi.addEvent({\n                id:5,\n                customer: \"Kesgisu\",\n                project: \"TelekomTakım\",\n                type: \"Bilgisayar\",\n                hours: 5,\n                startdate: selectInfo.startStr+'T00:00:00',\n                enddate: selectInfo.endStr+'T00:00:00',\n                description: \"başardın\"\n            })\n        }\n       /* this.addEventToState()*/\n    }\n\n    handleEventClick = (clickInfo) => {\n        if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.description}'`)) {\n            clickInfo.event.remove()\n        }\n    }\n\n    handleEvents = (events) => {\n        this.setState({\n            currentEvents: events\n        })\n    }\n\n}\n\nfunction renderEventContent(eventInfo) {\n    return (\n        <>\n            <b>{eventInfo.timeText}</b>\n            <i>{eventInfo.event.id}</i>\n\n        </>\n    )\n}\n\nfunction renderSidebarEvent(event) {\n    return (\n        <li key={event.id}>\n            <b>{formatDate(event.startdate, { year: 'numeric', month: 'short', day: 'numeric' })}</b> \n            <i>{event.description}</i>\n        </li>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}